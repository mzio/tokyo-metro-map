{"version":3,"sources":["components/Navigation.js","components/D3.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","line","buttonText","showAbout","handleLineSelect","bind","assertThisInitialized","handleClose","handleShow","e","console","log","target","value","setState","react_default","a","createElement","Fragment","Modal","size","show","onHide","backdropClassName","Header","closeButton","Title","Body","href","Navbar","bg","expand","variant","Nav","className","Toggle","aria-controls","Collapse","id","Form","inline","Label","Control","as","onChange","handleTimeClick","Button","onClick","handleStartClick","time","React","Component","D3","hour","links","nodes","loaded","updateNodes","updateLinks","getD3","container","map","getCanvasContainer","paths","prevProps","selectAll","remove","bbox","document","body","getBoundingClientRect","center","getCenter","zoom","getZoom","scale","Math","PI","pow","geoMercator","lng","lat","translate","width","height","d3Projection","geoPath","projection","self","loadNodes","data","dots","select","append","exit","enter","classed","attr","styles","fill","d","line_color","fill-opacity","stroke","stroke-width","z-index","attrs","cx","longitude","latitude","cy","json","process","then","lineName","loadLinks","svg","classLine","replace","color","stroke-opacity","source","find","o","name","x0","y0","x1","y1","val","i","push","start","end","loadParticles","linkTotal","sum","selectedPaths","number","max","floor","path","random","length","ix","opacity","nextStates","circles","each","timer","setInterval","transition","duration","ease","easePoly","targetPaths","filter","futureOpacity","line_links","Map","viewport","style","rendered","mapboxgl","D3_D3","startButtonText","require","config","accessToken","App","seconds","handleStart","handleTimeSelect","hourStr","substring","secondsInt","parseInt","date","Date","setSeconds","timeString","toISOString","substr","clearInterval","mapboxProps","Map_Map","Navigation_Navigation","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34f12670.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav, Form, Button, Modal } from \"react-bootstrap\";\n\nexport default class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      line: \"all\",\n      buttonText: \"Start\",\n      showAbout: false\n    };\n    this.handleLineSelect = this.handleLineSelect.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n\n  handleLineSelect(e) {\n    console.log(e.target.value);\n    this.setState({ line: e.target.value });\n    console.log(this.state);\n  }\n\n  handleClose() {\n    this.setState({ showAbout: false });\n  }\n\n  handleShow() {\n    this.setState({ showAbout: true });\n  }\n\n  render() {\n    return (\n      <>\n        <Modal\n          size=\"lg\"\n          show={this.state.showAbout}\n          onHide={this.handleClose}\n          backdropClassName=\"modalBackdrop\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>About</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              A little side project to display Tokyo Metro travel averaged over\n              a single day. Visualization is generated through a client-side\n              simulation determined by the hour, using markov chains calculated\n              from data on Foursquare check-ins from 2012 to 2013. To run,\n              select an hour or hit start, which will auto-reload the simulation\n              at every hour.\n            </p>\n            <p>\n              See <a href=\"#\">[here]</a> for more info. Briefly, Foursquare\n              check-in data was filtered for subway stations and\n              cross-referenced with station geocoordinates belonging to the\n              Tokyo Metro and Toei Subway subway system lines. From only knowing\n              check-in data, directionality was inferred with transition\n              matrices for each line based on the ratio of station to overall\n              line check-ins. To try to capture possible changes in distribution\n              over the day, matrices were constructed for each hour.\n            </p>\n            <p>\n              Final note: as part of a side project creation thing this is\n              mostly untested on mobile or any browser other than Chrome. Feel\n              free to report any bugs at the link below.\n            </p>\n            <p>Creds:</p>\n            <ul>\n              <li>\n                <a href=\"https://www.kaggle.com/chetanism/foursquare-nyc-and-tokyo-checkin-dataset/version/2#dataset_TSMC2014_TKY.csv\">\n                  [Tokyo Foursquare Check-in Data]\n                </a>\n              </li>\n              <li>\n                <a href=\"https://www.npmjs.com/package/japan-train-data\">\n                  [Japan Train Geocoordinate Data 🚉 🚉 🚉]\n                </a>\n              </li>\n            </ul>\n            <p>\n              Code available on{\" \"}\n              <a href=\"https://github.com/mzio/tokyo-metro-map/tree/master/app\">\n                [Github]\n              </a>\n              .\n            </p>\n            <p>\n              See more projects / get contact info to report bugs{\" \"}\n              <a href=\"https://michaelzhang.xyz/\">[here]</a>.\n            </p>\n          </Modal.Body>\n        </Modal>\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n          <Nav href=\"#\" className=\"navElement\">\n            <h3>Tokyo Metro Markov Models</h3>\n          </Nav>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Form inline className=\"navElement\">\n              {/* <Form.Label className=\"formInlineLabel\">Select Line:</Form.Label>\n          <Form.Control as=\"select\" onChange={this.props.handleChange}>\n            <option>All</option>\n            <option>Toei Asakusa Line</option>\n            <option>Toei Mita Line</option>\n            <option>Toei Oedo Line</option>\n            <option>Toei Shinjuku Line</option>\n            <option>Tokyo Metro Chiyoda Line</option>\n            <option>Tokyo Metro Fukutoshin Line</option>\n            <option>Tokyo Metro Ginza Line</option>\n            <option>Tokyo Metro Hanzomon Line</option>\n            <option>Tokyo Metro Hibiya Line</option>\n            <option>Tokyo Metro Marunouchi Line</option>\n            <option>Tokyo Metro Namboku Line</option>\n            <option>Tokyo Metro Tozai Line</option>\n            <option>Tokyo Metro Yurakucho Line</option>\n          </Form.Control> */}\n              <Form.Label className=\"formInlineLabel\">\n                Hit start or select a time here:\n              </Form.Label>\n              <Form.Control as=\"select\" onChange={this.props.handleTimeClick}>\n                <option>00:00</option>\n                <option>01:00</option>\n                <option>02:00</option>\n                <option>03:00</option>\n                <option>04:00</option>\n                <option>05:00</option>\n                <option>06:00</option>\n                <option>07:00</option>\n                <option>08:00</option>\n                <option>09:00</option>\n                <option>10:00</option>\n                <option>11:00</option>\n                <option>12:00</option>\n                <option>13:00</option>\n                <option>14:00</option>\n                <option>15:00</option>\n                <option>16:00</option>\n                <option>17:00</option>\n                <option>18:00</option>\n                <option>19:00</option>\n                <option>20:00</option>\n                <option>21:00</option>\n                <option>22:00</option>\n                <option>23:00</option>\n              </Form.Control>\n              <Button\n                variant=\"outline-light\"\n                className=\"navElement\"\n                onClick={this.props.handleStartClick}\n              >\n                {this.props.buttonText}\n              </Button>\n              <Form.Label className=\"formInlineLabel\">\n                Time: {this.props.time}\n              </Form.Label>\n              <Form.Label className=\"formInlineLabel\">\n                <a href=\"#\" onClick={this.handleShow}>\n                  [Click here for about / intro]\n                </a>\n              </Form.Label>\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { select, selectAll } from \"d3-selection\";\nimport \"d3-selection-multi\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport { json } from \"d3-fetch\";\nimport { sum } from \"d3-array\";\nimport { easePoly } from \"d3-ease\";\nimport { transition } from \"d3-transition\";\n\nexport default class D3 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      line: this.props.line,\n      hour: this.props.hour,\n      links: [],\n      nodes: [],\n      loaded: false\n    };\n    this.updateNodes = this.updateNodes.bind(this);\n    this.updateLinks = this.updateLinks.bind(this);\n\n    this.getD3 = this.getD3.bind(this);\n  }\n\n  componentDidMount() {\n    this.container = this.props.map.getCanvasContainer();\n    this.paths = {};\n    this.updateNodes();\n    this.updateLinks();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.line !== this.props.line) {\n      selectAll(\"svg\").remove();\n      this.updateNodes();\n      this.updateLinks();\n    }\n    if (prevProps.hour !== this.props.hour) {\n      selectAll(\"svg\").remove();\n      console.log(this.props.hour);\n      this.updateLinks();\n      this.updateNodes();\n    }\n  }\n\n  getD3() {\n    var map = this.props.map;\n    var bbox = document.body.getBoundingClientRect();\n    var center = map.getCenter();\n    var zoom = map.getZoom();\n    var scale = ((512 * 0.5) / Math.PI) * Math.pow(2, zoom);\n    var d3projection = geoMercator()\n      .center([center.lng, center.lat])\n      .translate([bbox.width / 2, bbox.height / 2])\n      .scale(scale);\n    return d3projection;\n  }\n\n  updateNodes() {\n    this.d3Projection = this.getD3();\n    var path = geoPath();\n\n    path.projection(this.d3Projection);\n\n    var self = this;\n\n    function loadNodes(container, data) {\n      const svg = select(container).append(\"svg\");\n      const dots = svg.selectAll(\"circle.dot\").data(data);\n      dots.exit().remove();\n      dots\n        .enter()\n        .append(\"circle\")\n        .classed(\"dot\", true)\n        .attr(\"r\", 7)\n        .styles({\n          fill: function(d) {\n            return d.line_color;\n          },\n          \"fill-opacity\": 0,\n          stroke: \"#004d60\",\n          \"stroke-width\": 0,\n          \"z-index\": 1000\n        })\n        .attrs({\n          cx: function(d) {\n            return self.d3Projection([d.longitude, d.latitude])[0];\n          },\n          cy: function(d) {\n            return self.d3Projection([d.longitude, d.latitude])[1];\n          }\n        });\n    }\n\n    json(process.env.PUBLIC_URL + \"/lines_nodes.json\").then(function(data) {\n      self.setState({ nodes: data });\n      if (self.props.line !== \"all\") {\n        loadNodes(self.container, data[self.props.line]);\n      } else {\n        for (var lineName in data) {\n          loadNodes(self.container, data[lineName]);\n        }\n      }\n    });\n  }\n\n  updateLinks() {\n    this.d3Projection = this.getD3();\n    var path = geoPath();\n\n    path.projection(this.d3Projection);\n\n    var self = this;\n\n    function loadLinks(svg, data, line) {\n      const classLine = line.replace(/\\s+/g, \"\");\n      try {\n        const links = svg\n          .append(\"g\")\n          .selectAll(\".link_\" + classLine)\n          .data(data);\n        links\n          .enter()\n          .append(\"path\")\n          .attr(\"class\", \"link_\" + classLine)\n          .styles({\n            stroke: function(d) {\n              return d.color;\n            },\n            \"stroke-width\": 5,\n            \"stroke-opacity\": 0.075,\n            \"z-index\": 1000\n          })\n          .attr(\"d\", function(d) {\n            try {\n              var source = self.state.nodes[line].find(o => {\n                return o.name === d.source;\n              });\n              var target = self.state.nodes[line].find(o => {\n                return o.name === d.target;\n              });\n\n              var x0 = self.d3Projection([\n                  source.longitude,\n                  source.latitude\n                ])[0],\n                y0 = self.d3Projection([source.longitude, source.latitude])[1],\n                x1 = self.d3Projection([target.longitude, target.latitude])[0],\n                y1 = self.d3Projection([target.longitude, target.latitude])[1];\n            } catch (e) {}\n            let val = d.value;\n            if (val < 10) {\n              val = 20;\n            }\n            for (let i = 0; i < val; i++) {\n              self.paths[line].push({\n                source: d.source,\n                target: d.target,\n                start: [x0, y0],\n                end: [x1, y1],\n                color: d.color\n              });\n            }\n\n            return \"M\" + x0 + \",\" + y0 + \"L\" + x1 + \",\" + y1;\n          });\n      } catch (e) {}\n    }\n\n    function loadParticles(svg, data, line) {\n      const linkTotal = sum(data, function(d) {\n        return d.value;\n      });\n\n      const paths = self.paths[line];\n\n      var selectedPaths = [];\n      try {\n        var number = Math.max(Math.floor(linkTotal / 40), 1);\n      } catch (e) {\n        console.log(e);\n      }\n\n      for (let i = 0; i < number; i++) {\n        // Pick initial station path\n        var path = paths[Math.floor(Math.random() * paths.length)];\n        selectedPaths.push({ ix: i, path: path, opacity: 1 });\n      }\n\n      var nextStates = {};\n\n      var circles = svg\n        .selectAll(\"circle.dot\")\n        .data(selectedPaths)\n        .enter()\n        .append(\"circle\")\n        .classed(\"dot\", true)\n        .attr(\"r\", 2)\n        .styles({\n          fill: path.color,\n          \"fill-opacity\": 1,\n          stroke: path.color,\n          \"stroke-width\": 6,\n          \"stroke-opacity\": 0.3,\n          \"z-index\": 1000\n        })\n        .attrs({\n          cx: function(d) {\n            return d.path.start[0];\n          },\n          cy: function(d) {\n            return d.path.start[1];\n          }\n        })\n        .each(function(d) {\n          nextStates[d.ix] = [\n            d.path.end[0],\n            d.path.end[1],\n            d.path.target,\n            d.opacity,\n            1 // future opacity\n          ];\n        });\n\n      function moveParticles() {\n        circles\n          .transition()\n          .duration(0)\n          .styles({\n            \"fill-opacity\": function(d) {\n              return nextStates[d.ix][3];\n            },\n            \"stroke-opacity\": function(d) {\n              return nextStates[d.ix][3] - 0.7;\n            }\n          })\n          .transition()\n          .ease(easePoly)\n          .duration(360)\n          .attr(\"cx\", function(d) {\n            return nextStates[d.ix][0];\n          })\n          .attr(\"cy\", function(d) {\n            return nextStates[d.ix][1];\n          })\n\n          .each(function(d) {\n            const targetPaths = self.paths[line].filter(o => {\n              return o.source === nextStates[d.ix][2];\n            });\n            var futureOpacity = nextStates[d.ix][4];\n            if (targetPaths.length > 0) {\n              const path =\n                targetPaths[Math.floor(Math.random() * targetPaths.length)];\n              if (futureOpacity === 1) {\n                nextStates[d.ix] = [\n                  path.end[0],\n                  path.end[1],\n                  path.target,\n                  1,\n                  1\n                ];\n              } else {\n                nextStates[d.ix] = [\n                  path.end[0],\n                  path.end[1],\n                  path.target,\n                  0,\n                  1\n                ];\n              }\n            } else {\n              var path = paths[Math.floor(Math.random() * paths.length)];\n              //   console.log(path);\n              nextStates[d.ix] = [path.end[0], path.end[1], path.target, 0, 0];\n            }\n          });\n      }\n\n      self.timer = setInterval(moveParticles, 360);\n    }\n    json(process.env.PUBLIC_URL + \"/lines_links.json\").then(function(data) {\n      var line_links = data[self.props.hour];\n      if (self.props.line !== \"all\") {\n        loadLinks(self.container, line_links[self.props.line], self.props.line);\n      } else {\n        for (var lineName in line_links) {\n          var svg = select(self.container).append(\"svg\");\n          self.paths[lineName] = [];\n          loadLinks(svg, line_links[lineName], lineName);\n          if (self.paths[lineName].length > 0) {\n            loadParticles(svg, line_links[lineName], lineName);\n          }\n        }\n      }\n    });\n  }\n\n  render() {\n    return <div />;\n  }\n}\n","import React from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport D3 from \"./D3\";\n\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        container: \"map\",\n        style: this.props.style,\n        center: this.props.center,\n        zoom: this.props.zoom\n      },\n      rendered: false\n    };\n  }\n\n  componentDidMount() {\n    this.map = new mapboxgl.Map(this.state.viewport);\n    this.setState({ rendered: true });\n  }\n\n  render() {\n    if (this.state.rendered) {\n      return (\n        <div>\n          <div id=\"map\" />\n          <D3\n            map={this.map}\n            line={this.props.line}\n            hour={this.props.hour}\n            buttonText={this.props.startButtonText}\n          />\n        </div>\n      );\n    } else {\n      return <div id=\"map\" />;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Navigation from \"./components/Navigation\";\nimport Map from \"./components/Map\";\nimport \"./App.css\";\n\nrequire(\"dotenv\").config();\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_PUBLIC_KEY;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: \"00:00\",\n      line: \"all\",\n      startButtonText: \"Start\",\n      seconds: 0\n    };\n    this.handleLineSelect = this.handleLineSelect.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleTimeSelect = this.handleTimeSelect.bind(this);\n  }\n\n  handleLineSelect(e) {\n    this.setState({ line: e.target.value });\n  }\n\n  handleTimeSelect(e) {\n    const hourStr = e.target.value.substring(0, 2);\n    let hourInt = parseInt(hourStr, 10);\n    let secondsInt = hourInt * 3600;\n    this.setState({ seconds: secondsInt });\n    var date = new Date(null);\n    date.setSeconds(secondsInt);\n    console.log(secondsInt);\n    var timeString = date.toISOString().substr(11, 5);\n    this.setState({ time: timeString });\n  }\n\n  handleStart(e) {\n    var self = this;\n    function updateSecs() {\n      if (self.state.seconds >= 86399) {\n        self.setState({ seconds: 0 });\n      } else {\n        self.setState({ seconds: (self.state.seconds += 10) });\n      }\n      var date = new Date(null);\n      date.setSeconds(self.state.seconds);\n      var timeString = date.toISOString().substr(11, 5);\n      self.setState({ time: timeString });\n    }\n    // this.setState({ start: !this.state.start });\n    if (this.state.startButtonText === \"Start\") {\n      this.setState({ startButtonText: \"Pause\" });\n      this.timer = setInterval(updateSecs, 10);\n    } else {\n      this.setState({ startButtonText: \"Start\" });\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    let mapboxProps = {\n      style: \"mapbox://styles/mapbox/dark-v9\",\n      center: [139.7586, 35.6909],\n      zoom: 11.5,\n      line: this.state.line,\n      hour: parseInt(this.state.time.substring(0, 2), 10),\n      startButtonText: this.state.startButtonText\n    };\n    return (\n      <div>\n        <div id=\"map\" />\n        <Map {...mapboxProps} />\n        <Navigation\n          handleChange={this.handleLineSelect}\n          handleStartClick={this.handleStart}\n          handleTimeClick={this.handleTimeSelect}\n          time={this.state.time}\n          buttonText={this.state.startButtonText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}